agent <- data[,2]
fit <- aov(tl~agent)
summary(fit)
qf(0.95,4,95)
TukeyHSD(fit)
boxplot(tl~agent)
plot(TukeyHSD(fit))
data135 <- data[data$Agent==1|data$Agent==3|data$Agent==5,]
confint(lm(data135$Time.lapse~data135$Agent),level = 1-0.1/(3*2/2))
View(data)
my.mean.fun <- function(df){
return(mean(df$Time.lapse))
}
daply(data,.(Agent),my.mean.fun)
nrow(data)/length(levels(data$Agent))
View(data)
?MSE
sum(c(1,2,3)^2/3)
14/3
?qt
my.mean.fun <- function(df){
return(mean(df$Time.lapse))
}
contrastCI <- function(df,contrast,MSE,
alpha,bonf = FALSE){
N <- nrow(df)
# number of groups
k <- length(levels(df$Agent))
# observations in each group
n <- N/k
# means for each agent
mean <- daply(df,.(Agent),my.mean.fun)
C.hat <- sum(contrast*mean)
var.C.hat <- MSE*sum(contrast^2/n)
t <- ifelse(bonf,qt(1-alpha/(k*(k-1)),N-k),
qt(1-alpha/2,N-k))
CI <- c(C.hat-t*sqrt(var.C.hat),
C.hat+t*sqrt(var.C.hat))
return(CI)
}
contrastCI(data,c(0.5,0.5,-0.5,-0.5,0),7.4,
alpha = 0.05,bonf = FALSE)
contrastCI(data,c(0.5,0.5,-0.5,-0.5,0),7.5,
alpha = 0.05,bonf = FALSE)
contr <- matrix(c(0.5,0.5,-0.5,-0.5,0),ncol = 1)
contrasts(data$Agent) <- contr
fit2 <- aov(Time.lapse~Agent,data = data)
summary.aov(fit2, split = list(Agent=list("Merchandise VS. Cash"=1)))
contr <- matrix(c(0.5,0.5,-0.5,-0.5,0),ncol = 1)
contrasts(data$Agent) <- contr
fit2 <- aov(Time.lapse~Agent,data = data)
summary.aov(fit2)
fit2 <- aov(Time.lapse~Agent,data = data)
summary.aov(fit2)
contrast1 <- c(1,-1,0,0,0)
contrast2 <- c(0.5,0.5,0,0,-1)
contrast3 <- c(0,0,0.5,0.5,-1)
contrastCI(data,contrast1,7.5,
alpha = 0.05,bonf = TRUE)
contrastCI(data,contrast2,7.5,
alpha = 0.05,bonf = TRUE)
contrastCI(data,contrast3,7.5,
alpha = 0.05,bonf = TRUE)
contrastCI(data,c(1,0,-1,0,0),7.5,
alpha = 0.05,bonf = FALSE)
contrastCI(data,c(1,0,0,0,-1),7.5,
alpha = 0.05,bonf = FALSE)
contrastCI(data,c(1,0,0,0,-1),7.5,
alpha = 0.05,bonf = TRUE)
contrastCI(data,c(1,0,-1,0,0),7.5,
alpha = 0.05,bonf = TRUE)
fit
fit[1,2]
anova(fit)
MSE <- anova(fit)[3,3]
MSE
MSE <- anova(fit)[2,3]
MSE
tl <- data[,1]
agent <- data[,2]
fit <- aov(tl~agent)
summary(fit)
qf(0.95,4,95)
MSE <- anova(fit)[2,3]
contrastCI(data,c(0.5,0.5,-0.5,-0.5,0),MSE,
alpha = 0.05,bonf = FALSE)
contrast1 <- c(1,-1,0,0,0)
contrast2 <- c(0.5,0.5,0,0,-1)
contrast3 <- c(0,0,0.5,0.5,-1)
contrastCI(data,contrast1,MSE,
alpha = 0.05,bonf= TRUE)
contrastCI(data,contrast2,MSE,
alpha = 0.05,bonf = TRUE)
contrastCI(data,contrast3,MSE,
alpha = 0.05,bonf = TRUE)
fit2 <- aov(data135$Time.lapse~data135$Agent)
MSE135 <- anova(fit)[2,3]
contrastCI(data135,c(1,-1,0),MSE135,0.05,TRUE)
contrastCI(data135,c(1,-1,0),MSE135,0.05,TRUE)
daply(data135,.(Agent),my.mean.fun)
my.mean.fun <- function(df){
return(mean(df$Time.lapse))
}
contrastCI <- function(df,contrast,MSE,
alpha,bonf = FALSE){
N <- nrow(df)
# number of groups
k <- length(levels(df$Agent))
# observations in each group
n <- N/k
# means for each agent
mean <- daply(df,.(as.numeric(Agent)),my.mean.fun)
C.hat <- sum(contrast*mean)
var.C.hat <- MSE*sum(contrast^2/n)
t <- ifelse(bonf,qt(1-alpha/(k*(k-1)),N-k),
qt(1-alpha/2,N-k))
CI <- c(C.hat-t*sqrt(var.C.hat),
C.hat+t*sqrt(var.C.hat))
return(CI)
}
daply(data135,.(Agent),my.mean.fun)
daply(data135,.(as.numeric(Agent)),my.mean.fun)
contrastCI(data135,c(1,-1,0),MSE135,0.05,TRUE)
contrastCI(data135,c(1,-1,0),MSE135,0.1,TRUE)
contrastCI(data,c(0.5,0.5,-0.5,-0.5,0),MSE,
alpha = 0.05,bonf = FALSE)
contrastCI(data,c(0.25,0.2,0.2,0.2,0.15),MSE,
alpha = 0.05,bonf = FALSE)
contrastCI(data135,c(1,-1,0),MSE135,
alpha = 0.1,bonf = TRUE)
contrastCI(data135,c(1,-1,0),MSE135,
alpha = 0.1,bonf = TRUE)
contrastCI(data135,c(1,0,-1),MSE135,
alpha = 0.1,bonf = TRUE)
contrastCI(data135,c(0,1,-1),MSE135,
alpha = 0.1,bonf = TRUE)
data135 <- data[data$Agent==1|data$Agent==3|data$Agent==5,]
confint(lm(data135$Time.lapse~data135$Agent),level = 1-0.1/(3*2))
hf <- read.table("Hayfever.txt")
colnames(hf) <- c("Housofrel","A","B","Observation.Number")
A <- hf[,2]
B <- hf[,3]
hr <- hf[,1]
interaction.plot(A,B,hr)
summary(aov(hr~as.factor(A)*as.factor(B)))
1-pf(122.2,4,27)
fit1 <- hr~as.factor(A)+as.factor(B)
summary(aov(fit1))
?predict
fit2 <- hr~as.factor(A)*as.factor(B)
predict(fit2,interval = "confidence")[A==2&B==3,]
fit2 <- hr~as.factor(A)*as.factor(B)
predict(lm(fit2),interval = "confidence")[A==2&B==3,]
fit2 <- hr~as.factor(A)*as.factor(B)
predict(lm(fit2),interval = "confidence",
level = 0.95)[A==2&B==3,]
setwd("C:/Users/50347/Documents/Columbia Courses/2nd semester/GR5291/Homework")
library(plyr)
data <- read.table("sofdrink.txt", header = TRUE)
data$Agent <- as.factor(data$Agent)
tl <- data[,1]
agent <- data[,2]
fit <- aov(tl~agent)
summary(fit)
qf(0.95,4,95)
MSE <- anova(fit)[2,3]
TukeyHSD(fit)
boxplot(tl~agent)
plot(TukeyHSD(fit))
my.mean.fun <- function(df){
return(mean(df$Time.lapse))
}
contrastCI <- function(df,contrast,MSE,
alpha,bonf = FALSE){
N <- nrow(df)
# number of groups
k <- length(levels(df$Agent))
# observations in each group
n <- N/k
# means for each agent
mean <- daply(df,.(as.numeric(Agent)),my.mean.fun)
C.hat <- sum(contrast*mean)
var.C.hat <- MSE*sum(contrast^2/n)
t <- ifelse(bonf,qt(1-alpha/(k*(k-1)),N-k),
qt(1-alpha/2,N-k))
CI <- c(C.hat-t*sqrt(var.C.hat),
C.hat+t*sqrt(var.C.hat))
return(CI)
}
data135 <- data[data$Agent==1|data$Agent==3|data$Agent==5,]
fit2 <- aov(data135$Time.lapse~data135$Agent)
MSE135 <- anova(fit2)[2,3]
contrastCI(data135,c(1,-1,0),MSE135,
alpha = 0.1,bonf = TRUE)
contrastCI(data135,c(1,0,-1),MSE135,
alpha = 0.1,bonf = TRUE)
contrastCI(data135,c(0,1,-1),MSE135,
alpha = 0.1,bonf = TRUE)
contrastCI(data,c(0.5,0.5,-0.5,-0.5,0),MSE,
alpha = 0.05,bonf = FALSE)
contrast1 <- c(1,-1,0,0,0)
contrast2 <- c(0.5,0.5,0,0,-1)
contrast3 <- c(0,0,0.5,0.5,-1)
contrastCI(data,contrast1,MSE,
alpha = 0.05,bonf= TRUE)
contrastCI(data,contrast2,MSE,
alpha = 0.05,bonf = TRUE)
contrastCI(data,contrast3,MSE,
alpha = 0.05,bonf = TRUE)
contrastCI(data,c(0.25,0.2,0.2,0.2,0.15),MSE,
alpha = 0.05,bonf = FALSE)
shiny::runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
load("../output/hos.RData")
load("~/output/hos.RData")
source("../output/hos.RData")
load("C:/Users/50347/Documents/GitHub/Spring2018-Project2-Group8/output/hos.RData")
runApp('~/GitHub/Spring2018-Project2-Group8/app')
load("C:/Users/50347/Documents/GitHub/Spring2018-Project2-Group8/output/Hospital.RData")
runApp('~/GitHub/Spring2018-Project2-Group8/app')
colnames(hospital)
?radioButtons
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
?reactive
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
head(hospital)
View(hospital)
state()
head(hospital$Mortality.national.comparison)
hospital$Mortality.national.comparison[5]
class(hospital$Mortality.national.comparison[5])
hospital$Mortality.national.comparison[4] + 1
as.numeric(hospital$Mortality.national.comparison[4]) + 1
as.numeric(hospital$Mortality.national.comparison
)
as.numeric(hospital$Mortality.national.comparison)[5]
class(as.numeric(hospital$Mortality.national.comparison)[5])
colnames(hospital)
hospital[1,]
x <- hospital[1,]
class(x)
x <- as.vector(x)
class(x)
x[1]
colnames(x)
row(12:18)
row[12:18]
row[,12:18]
row[12:18,]
x[12:18]
origin.weight <- c(11,11,11,11,2,2,2)
criterion.score <- x[12:18]
origin.weight*criterion.score
origin.weight*as.numeric(criterion.score)
criterion.score <- as.numeric(x[12:18])
origin.weight*criterion.score
View(hospital)
x <- hospital[5,]
criterion.score <- as.numeric(x[12:18])
criterion.score
View(hos)
View(hospital)
View(hos)
origin.weight*criterion.score
sum(origin.weight*criterion.score,na.rm = )
sum(origin.weight*criterion.score,na.rm = TRUE)
care.vec <-c(1,3,2,2,3,1,1)
sum(origin.weight*criterion.score,na.rm = TRUE)
origin.score <- origin.weight*care.vec/sum(origin.weight*care.vec)
origin.score
remove(origin.score)
care.weight <- origin.weight*care.vec/sum(origin.weight*care.vec)
sum(care.weight)
is.na(criterion.score)
weight <- ifelse(is.na(criterion.score),0,care.weight)
weight
scale(weight)
weight <- temp
temp <- weight
update.weight <- temp/sum(temp)
sum(update.weight)
update.weight
care.vec
data.state <- dhoapital[hoapital$State == "AL"]
data.state <- hospital[hoapital$State == "AL"]
data.state <- hospital[hospital$State == "AL"]
data.state <- hospital[hospital$State == "AL"]
hospital[hospital$State == "AL"]
View(hospital)
data.statehospital[hospital$State == "AL",]
data.state <- hospital[hospital$State == "AL",]
calScore <- function(row,care.vec){
# weight suggested for 7 criterion
origin.weight <- c(11,11,11,11,2,2,2)
# care weight for 7 criterion
care.weight <- origin.weight*care.vec/sum(origin.weight*care.vec)
# hospital scores for 7 criterion
criterion.score <- as.numeric(row[12:18])
temp <- ifelse(is.na(criterion.score),0,care.weight)
update.weight <- temp/sum(temp)
score <- update.weight*criterion.score
return(score)
}
score <- apply(data.state,1,calScore,care.vec = care.vec)
score
calScore(x,care.vec )
calScore <- function(row,care.vec){
# weight suggested for 7 criterion
origin.weight <- c(11,11,11,11,2,2,2)
# care weight for 7 criterion
care.weight <- origin.weight*care.vec/sum(origin.weight*care.vec)
# hospital scores for 7 criterion
criterion.score <- as.numeric(row[12:18])
temp <- ifelse(is.na(criterion.score),0,care.weight)
update.weight <- temp/sum(temp)
score <- update.weight*criterion.score
return(sum(score,na.rm = TRUE))
}
calScore(x,care.vec)
score <- apply(data.state,1,calScore,care.vec = care.vec)
score
order(score)
?renderDataTable
data.state[order(score),]
head(data.state[order(score),])
order(score)
care.vec
score[84]
order(score,decreasing = TRUE)
order(score,decreasing = FALSE)
runApp('~/GitHub/Spring2018-Project2-Group8/app')
is.na(criterion.score)
runApp('~/GitHub/Spring2018-Project2-Group8/app')
ord <- order(score,decreasing = TRUE)
rankedtable <- data.state[ord,c(1,2,3,4,5,7,19)]
rankedtable
View(rankedtable)
levels(rankedtable$payment)
class(rankedtable$payment)
rankedtable$payment
payswitch <- function(payment){
if(is.na(payment)){return("Not Avaliable")}
else{if(payment<=1.5) {return("$")}}
else{if(payment<2.5) {return("$$")}}
else{return("$$$")}
}
payswitch <- function(payment){
if(is.na(payment)) return("Not Avaliable")
else{if(payment<=1.5) return("$")}
else{if(payment<2.5) return("$$")}
else{return("$$$")}
}
?else
?else
?elseif
?if
else
?ifelse
?if_else
payswitch <- function(payment){
if(is.na(payment)) {return("Not Avaliable")}
else {if(payment<=1.5) {return("$")}
else{if(payment<2.5) {return("$$")}
else{return("$$$")}}}
}
payswitch(NA)
payswitch(1.3)
payswitch(1.5)
payswitch(2.5)
payswitch(2)
apply(rankedtable$payment,1,payswitch)
apply(rankedtable$payment,2,payswitch)
apply(data.frame(rankedtable$payment),1,payswitch)
colnames(rankedtable)
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
hospital$State=="AL"
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
calScore <- function(row,care.vec){
# weight suggested for 7 criterion
origin.weight <- c(11,11,11,11,2,2,2)
care.vec <- as.numeric(care.vec)
# care weight for 7 criterion
care.weight <- origin.weight*care.vec/sum(origin.weight*care.vec)
# hospital scores for 7 criterion
criterion.score <- as.numeric(row[12:18])
temp <- ifelse(is.na(criterion.score),0,care.weight)
update.weight <- temp/sum(temp)
score <- update.weight*criterion.score
return(sum(score,na.rm = TRUE))
}
calScore(data.state[5,],care.vec = care.vec)
apply(data.state, 1, calScore,care.vec = care.vec)
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
?apply(array, margin, ...)
x <- data.state[3,]
x[12:18]
class(x[12:18])
x[12]
class(x[12])
as.numeric(x[12:18])
runApp('~/GitHub/Spring2018-Project2-Group8/app')
careswitch <- function(care.vec){
res <- rep(NA,length(care.vec))
for(i in 1:length(care.vec)){
if(care.vec[i] == "Very Care"){res[i] = 3}
else {if(care.vec[i] == "Care") {res[i] = 2}
else {res[i]=1}}
}
return(res)
}
care.vec <- c("Care","Not Care","Very care","Care","Care","Very care","Not care")
careswitch <- function(care.vec){
res <- rep(NA,length(care.vec))
for(i in 1:length(care.vec)){
if(care.vec[i] == "Very care"){res[i] = 3}
else {if(care.vec[i] == "Care") {res[i] = 2}
else {res[i]=1}}
}
return(res)
}
careswitch(care.vec)
runApp('~/GitHub/Spring2018-Project2-Group8/app')
?switch
for(i in c(-1:3, 9))  print(switch(i, 1, 2 , 3, 4))
switch(2,"red","green","blue")
switch(care.vec,1,2,3)
switch(care.vec[1],1,2,3)
switch(care.vec[1],)
switch(care.vec[1])
switch(care.vec[1],1)
switch(care.vec[1],2)
switch(care.vec[1],3)
switch(care.vec[1],1,2,3)
runApp('~/GitHub/Spring2018-Project2-Group8/app')
switch(care.vec[1],"Very care" = 3,
"Care" = 2, "Not care" = 1)
switch(care.vec[35],"Very care" = 3,
"Care" = 2, "Not care" = 1)
switch(care.vec[5],"Very care" = 3,
"Care" = 2, "Not care" = 1)
x <- switch(care.vec[5],"Very care" = 3,
"Care" = 2, "Not care" = 1)
x
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
origin.weight <- c(11,11,11,11,2,2,2)
care.vec <- c(1,2,3,1,1,2,3)
origin.weight*care.vec
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
colnames(rankedtable)
runApp('~/GitHub/Spring2018-Project2-Group8/app')
1:nrow(data.state)
runApp('~/GitHub/Spring2018-Project2-Group8/app')
load("C:/Users/50347/Documents/GitHub/Spring2018-Project2-Group8/output/count.RData")
View(count.df)
runApp('~/GitHub/Spring2018-Project2-Group8/doc')
getwd()
setwd("C:/Users/50347/Documents/Github/Spring2018-Project2-Group8/doc")
setwd("../data")
getwd()
#read data
load("../data/hos.RData")
runApp('~/GitHub/Spring2018-Project2-Group8/doc')
runApp('~/GitHub/Spring2018-Project2-Group8/doc')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
getwd()
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/app')
runApp('~/GitHub/Spring2018-Project2-Group8/doc')
getwd()
runApp('~/GitHub/Spring2018-Project2-Group8/doc')
runApp('~/GitHub/Spring2018-Project2-Group8/doc')
runApp('~/GitHub/Spring2018-Project2-Group8/doc')
runApp('~/GitHub/Spring2018-Project2-Group8/doc')
runApp('~/GitHub/Spring2018-Project2-Group8/doc')
runApp('~/GitHub/Spring2018-Project2-Group8/doc')
